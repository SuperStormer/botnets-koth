{"version":3,"file":"worker.js","sources":["../../src/scripts/utils.js","../../src/scripts/WorkerBot.js","../../src/scripts/ControllerBot.js","../../src/scripts/WorkerBotWrapper.js","../../src/scripts/Controller.js","../../src/scripts/worker.js"],"sourcesContent":["//from https://stackoverflow.com/a/1527820/\r\nlet randInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\r\n//from https://stackoverflow.com/a/12646864/7941251\r\nfunction shuffle(array) {\r\n\t//in place\r\n\tarray;\r\n\tfor (var i = array.length - 1; i > 0; i--) {\r\n\t\tvar j = Math.floor(Math.random() * (i + 1));\r\n\t\tvar temp = array[i];\r\n\t\tarray[i] = array[j];\r\n\t\tarray[j] = temp;\r\n\t}\r\n}\r\n//adapted from https://davidwalsh.name/essential-javascript-functions\r\nfunction debounce(func, wait, immediate) {\r\n\tlet timeout;\r\n\treturn function() {\r\n\t\tlet context = this,\r\n\t\t\targs = arguments;\r\n\t\tlet later = function() {\r\n\t\t\ttimeout = null;\r\n\t\t\tif (!immediate) {\r\n\t\t\t\tfunc.apply(context, args);\r\n\t\t\t}\r\n\t\t};\r\n\t\tlet callNow = immediate && !timeout;\r\n\t\tclearTimeout(timeout);\r\n\t\ttimeout = setTimeout(later, wait);\r\n\t\tif (callNow) {\r\n\t\t\tfunc.apply(context, args);\r\n\t\t}\r\n\t};\r\n}\r\nexport { randInt, shuffle, debounce };\r\n","/*eslint no-unused-vars:0*/\r\nexport default class WorkerBot {\r\n\tconstructor(x, y) {\r\n\t\tthis.storageSize = 0;\r\n\t\tthis.storage = \"\";\r\n\t\tthis.color = \"\";\r\n\t}\r\n\tperformAction(surrondings, message) {}\r\n\tsendMessage(surrondings) {}\r\n}\r\n","/*eslint no-unused-vars:0*/\r\nexport default class ControllerBot {\r\n\tconstructor(locations) {\r\n\t\tthis.name = \"\";\r\n\t\tthis.storage = \"\";\r\n\t}\r\n\tsendMessage(messages, index) {\r\n\t\treturn [];\r\n\t}\r\n}\r\n","/*eslint no-unused-vars:0*/\r\nexport default class WorkerBotWrapper {\r\n\tconstructor(x, y, botClass) {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.gold = 0;\r\n\t\tthis.bot = new botClass(x, y);\r\n\t\tthis.name = botClass.name;\r\n\t\tthis.stunnedRound = -1;\r\n\t}\r\n\tperformAction(surrondings, message) {\r\n\t\tthis.bot.performAction(surrondings, message);\r\n\t}\r\n\tsendMessage(surrondings) {\r\n\t\tthis.bot.sendMessage(surrondings);\r\n\t}\r\n}\r\n","import { randInt, shuffle } from \"./utils.js\";\r\nimport WorkerBot from \"./WorkerBot.js\";\r\nimport ControllerBot from \"./ControllerBot.js\";\r\nimport WorkerBotWrapper from \"./WorkerBotWrapper.js\";\r\nconst STARTING_COINS = 100;\r\nconst COINS_PER_ROUND = 10;\r\nconst NUM_WORKER_BOTS = 20;\r\nexport default class Controller {\r\n\tconstructor(botClasses, displayFunc) {\r\n\t\tthis.displayFunc = displayFunc;\r\n\t\tthis.botClasses = botClasses.filter(\r\n\t\t\tbotClasses2 =>\r\n\t\t\t\tbotClasses2.controllerBot.prototype instanceof ControllerBot &&\r\n\t\t\t\tbotClasses2.workerBot.prototype instanceof WorkerBot\r\n\t\t);\r\n\t}\r\n\trunGame() {\r\n\t\tthis.initGrid();\r\n\t\tshuffle(this.botnets);\r\n\t\tthis.botnets = this.botnets.slice(0, 15);\r\n\t\tfor (let i = 0; i < 1000; i++) {\r\n\t\t\tthis.runRound(i);\r\n\t\t}\r\n\t\treturn this.botnets\r\n\t\t\t.sort((a, b) => a.gold - b.gold)\r\n\t\t\t.map(\r\n\t\t\t\t(botnet, i) =>\r\n\t\t\t\t\t`${i + 1}. ${\r\n\t\t\t\t\t\tbotnet.controllerBot.name\r\n\t\t\t\t\t}:${botnet.workerBots.reduce(\r\n\t\t\t\t\t\t(a, b) => a.gold + b.gold,\r\n\t\t\t\t\t\t0\r\n\t\t\t\t\t)} Gold`\r\n\t\t\t)\r\n\t\t\t.join(\"\\n\");\r\n\t}\r\n\trunRound(round) {\r\n\t\tconsole.log(round);\r\n\t\tfor (let i = 0; i < COINS_PER_ROUND; i++) {\r\n\t\t\tthis.generateCoin();\r\n\t\t}\r\n\t\tshuffle(this.botnets);\r\n\t\tlet workerBots = this.botnets.flatMap(botnet => botnet.workerBots);\r\n\t\tfor (let botnet of this.botnets) {\r\n\t\t\tfor (let i = 0; i < botnet.workerBots.length; i++) {\r\n\t\t\t\tlet workerBot = botnet.workerBots[i];\r\n\t\t\t\tif (\r\n\t\t\t\t\tworkerBot.stunnedRound !== -1 ||\r\n\t\t\t\t\tworkerBot.stunnedRound === round - 1\r\n\t\t\t\t) {\r\n\t\t\t\t\tworkerBot.stunnedRound = 0;\r\n\t\t\t\t\tlet allMessages = workerBots.map(workerBot2 =>\r\n\t\t\t\t\t\tworkerBot2.sendMessage(\r\n\t\t\t\t\t\t\tthis.getSurrondings(workerBot2.x, workerBot2.y)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t);\r\n\t\t\t\t\tlet controllerBotMessage = botnet.controllerBot.sendMessage(\r\n\t\t\t\t\t\tallMessages,\r\n\t\t\t\t\t\ti\r\n\t\t\t\t\t);\r\n\t\t\t\t\tlet action = workerBot.performAction(controllerBotMessage);\r\n\t\t\t\t\tif (!this.handleAction(action, workerBot)) {\r\n\t\t\t\t\t\tconsole.log(`Invalid Action(${action})`);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//emp'd\r\n\t\t\t\t\tconsole.log(\"EMP'd\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tinitGrid() {\r\n\t\tthis.grid = new Array(100); //indexed [y,x]\r\n\t\tfor (let i = 0; i < 100; i++) {\r\n\t\t\tthis.grid[i] = new Array(100);\r\n\t\t}\r\n\t\tthis.botnets = this.botClasses.map(botClasses2 => {\r\n\t\t\tlet workerBots = [];\r\n\t\t\tfor (let i = 0; i < NUM_WORKER_BOTS; i++) {\r\n\t\t\t\tworkerBots.push(this.generateWorkerBot(botClasses2.workerBot));\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tcontrollerBot: new botClasses2.controllerBot(\r\n\t\t\t\t\tworkerBots.map(bot => [bot.x, bot.y])\r\n\t\t\t\t),\r\n\t\t\t\tworkerBots: workerBots\r\n\t\t\t};\r\n\t\t});\r\n\t\tfor (let i = 0; i < STARTING_COINS; i++) {\r\n\t\t\tthis.generateCoin();\r\n\t\t}\r\n\t}\r\n\thandleAction(action, bot) {\r\n\t\t//returns true if action was valid\r\n\t\tswitch (action[0]) {\r\n\t\t\tcase \"kill\":\r\n\t\t\t\tif ([6, 7, 8, 11, 12, 13, 16, 17, 18].includes(action[1])) {\r\n\t\t\t\t\t//is valid attack spot\r\n\t\t\t\t\tlet coords = this.surrondingsIndexToCoords(action[1]);\r\n\t\t\t\t\tlet square = this.grid[coords[1]][coords[0]];\r\n\t\t\t\t\tif (square instanceof WorkerBotWrapper) {\r\n\t\t\t\t\t\tlet gold = Math.floor(square.gold);\r\n\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t`${bot.name} killed ${square.name} for ${gold} gold`\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tbot.gold += gold;\r\n\t\t\t\t\t\tsquare = undefined;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\tcase \"move\":\r\n\t\t\t\tif (action[1] >= 0 && action[1] <= 24) {\r\n\t\t\t\t\tlet coords = this.surrondingsIndexToCoords(action[1]);\r\n\t\t\t\t\tlet square = this.grid[coords[1]][coords[0]];\r\n\t\t\t\t\tif (square === undefined) {\r\n\t\t\t\t\t\tthis.grid[bot.y][bot.x] = undefined;\r\n\t\t\t\t\t\tsquare = bot;\r\n\t\t\t\t\t\t[bot.x, bot.y] = coords;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\tcase \"emp\":\r\n\t\t\t\tthrow new TypeError(\"emp not implemented\");\r\n\t\t}\r\n\t}\r\n\tgenerateCoin() {\r\n\t\tlet x = randInt(0, 99);\r\n\t\tlet y = randInt(0, 99);\r\n\t\tif (this.grid[y][x] === undefined) {\r\n\t\t\tthis.grid[y][x] = \"C\";\r\n\t\t} else {\r\n\t\t\tthis.generateCoin();\r\n\t\t}\r\n\t}\r\n\tgenerateWorkerBot(workerBotClass) {\r\n\t\tlet x = randInt(0, 99);\r\n\t\tlet y = randInt(0, 99);\r\n\t\tif (this.grid[y][x] === undefined) {\r\n\t\t\tlet bot = new WorkerBotWrapper(x, y, workerBotClass);\r\n\t\t\tthis.grid[y][x] = bot;\r\n\t\t\treturn bot;\r\n\t\t} else {\r\n\t\t\treturn this.generateWorkerBot();\r\n\t\t}\r\n\t}\r\n\tgetSurrondings(x, y) {\r\n\t\tlet surrondings = [];\r\n\t\tfor (let i = -2; i <= 2; i++) {\r\n\t\t\tfor (let j = -2; j <= 2; j++) {\r\n\t\t\t\tsurrondings.push(this.grid[y + i][x + j]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn surrondings;\r\n\t}\r\n\tsurrondingsIndexToCoords(index, x, y) {\r\n\t\t//returns as x,y\r\n\t\treturn [(index % 5) - 2 + x, Math.floor(index / 5) - 2 + y];\r\n\t}\r\n\tdisplay() {\r\n\t\tthis.displayFunc(this.grid);\r\n\t}\r\n}\r\n","import Controller from \"./Controller.js\";\r\nonmessage = function(event) {\r\n\tlet botClasses = event[0];\r\n\tlet controller = new Controller(botClasses, postMessage);\r\n\tcontroller.runGame();\r\n};\r\n"],"names":["randInt","min","max","Math","floor","random","shuffle","array","i","length","j","temp","WorkerBot","constructor","x","y","storageSize","storage","color","performAction","surrondings","message","sendMessage","ControllerBot","locations","name","messages","index","WorkerBotWrapper","botClass","gold","bot","stunnedRound","STARTING_COINS","COINS_PER_ROUND","NUM_WORKER_BOTS","Controller","botClasses","displayFunc","filter","botClasses2","controllerBot","prototype","workerBot","runGame","initGrid","this","botnets","slice","runRound","sort","a","b","map","botnet","workerBots","reduce","join","round","console","log","generateCoin","flatMap","allMessages","workerBot2","getSurrondings","controllerBotMessage","action","handleAction","grid","Array","push","generateWorkerBot","includes","coords","surrondingsIndexToCoords","square","undefined","TypeError","workerBotClass","display","onmessage","event","postMessage"],"mappings":"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"}